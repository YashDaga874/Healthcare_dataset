# -*- coding: utf-8 -*-
"""Health_insurance_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qjx8NeRFVsNomPOqyUB5Ox-GrXEEJJ6K

# Importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""# Importing the datasets

"""

df = pd.read_csv('insurance.csv')
X = df.iloc[: , :-1].values
y = df.iloc[:,-1].values
df.head()

"""# Getting info on the datasets

"""

df.info()

df['region'].unique()

df.isnull().sum()

df.describe()

gender_counts = df['sex'].value_counts()
print(gender_counts)

smoker_counts = df['smoker'].value_counts()
print(smoker_counts)

region_counts = df['region'].value_counts()
print(region_counts)

children_counts = df['children'].value_counts()
print(children_counts)

result = df.groupby(['sex', 'smoker']).size().reset_index(name='count')
pivot_result = result.pivot(index='sex', columns='smoker', values='count').fillna(0)
print(pivot_result)

"""# Getting some plot"""

sns.set()
plt.figure(figsize=(6,6))
sns.histplot(df['age'])
plt.title('Age distribution')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x = 'sex', data =df)
plt.title('Sex distribution')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x = 'smoker', data =df)
plt.title('Smoker distribution')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x = 'region', data =df)
plt.title('Region distribution')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x = 'children', data =df)
plt.title('Children distribution')
plt.show()

"""# Categorical features -
1.sex
2.smoker
3.region
"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

ct = ColumnTransformer(transformers = [('encoder', OneHotEncoder(), [1,4,5])], remainder = 'passthrough')
X = np.array(ct.fit_transform(X))
print(X)
print(X.shape)

"""# Splitting the dataset into training and test data set

"""

from sklearn.model_selection import train_test_split
X_train , X_test, y_train, y_test = train_test_split(X, y , test_size = 0.2 , random_state = 3)

"""# Applying models

# Polynomial Regression ->
"""

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
regressor = PolynomialFeatures(degree = 2)
X_new = regressor.fit_transform(X_train)
lr = LinearRegression()
lr.fit(X_new,y_train)

y_pred = lr.predict(regressor.transform(X_test))

from sklearn.metrics import r2_score
print(r2_score(y_test,y_pred))

"""# Random Forest Regression"""

from sklearn.ensemble import RandomForestRegressor
rfg = RandomForestRegressor(n_estimators = 50, random_state = 3)
rfg.fit(X_train,y_train)

y_pred_2 = rfg.predict(X_test)

from sklearn.metrics import r2_score
print(r2_score(y_test,y_pred_2))

"""# XG Boost Regressor"""

from xgboost import XGBRegressor
br = XGBRegressor()
br.fit(X_train, y_train)

y_pred_3 = br.predict(X_test)

print(r2_score(y_test,y_pred_3))